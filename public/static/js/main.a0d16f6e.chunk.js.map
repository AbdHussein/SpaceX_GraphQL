{"version":3,"sources":["components/LaunchItem.tsx","components/MissionKey.tsx","components/Launches.tsx","components/Launch.tsx","logo.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LaunchItem","props","launch","className","clsx","mission_name","moment","launch_date_local","format","to","flight_number","MissionKey","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","role","launches","map","LAUNCH_QUERY","Launch","match","variables","parseInt","params","launch_year","launch_success","rocket","rocket_id","rocket_name","rocket_type","App","src","logo","alt","style","width","display","margin","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"kSAiCeA,EAjB2B,SAACC,GAAW,IAC1CC,EAAWD,EAAXC,OACR,OACI,qBAAKC,UAAU,sBAAf,SACI,sBAAKA,UAAU,MAAf,UACI,sBAAKA,UAAU,WAAf,UACI,2CAAa,sBAAMA,UAAWC,aAAW,OAANF,QAAM,IAANA,OAAA,EAAAA,EAAM,gBAAuB,eAAiB,eAApE,SAAqFA,EAAOG,kBACzG,uCAAUC,IAAOJ,EAAOK,mBAAmBC,OAAO,0BAEtD,qBAAKL,UAAU,2BAAf,SACI,cAAC,IAAD,CAAMM,GAAE,kBAAaP,EAAOQ,eAAiBP,UAAU,oBAAvD,oCCXLQ,EAbI,WACf,OACI,sBAAKR,UAAU,OAAf,UACI,8BACI,sBAAMA,UAAU,yBADpB,gBAGA,8BACI,sBAAMA,UAAU,wBADpB,iBCDJS,EAAiBC,YAAH,6MAkCPC,EAvBE,WAAO,IAAD,EACcC,YAASH,GAAlCI,EADW,EACXA,QAASC,EADE,EACFA,MAAOC,EADL,EACKA,KAExB,OAAIF,EACJ,qBAAKb,UAAU,mBAAf,SACI,qBAAKA,UAAU,iBAAiBgB,KAAK,SAArC,SAA8C,sBAAMhB,UAAU,gBAE9Dc,EAAc,yCAGd,gCACI,oBAAId,UAAU,iBAAd,sBACA,cAAC,EAAD,IAEIe,EAAKE,SAASC,KAAI,SAACnB,GAEf,OAAO,cAAC,EAAD,CAAuCA,OAAQA,GAA9BA,EAAOQ,sBC1B7CY,EAAeT,YAAH,0bAwEHU,EAvDU,SAACtB,GAAU,IAEzBuB,EAASvB,EAATuB,MAFyB,EAGCT,YAASO,EAAc,CACpDG,UAAW,CACPf,cAAegB,SAASF,EAAMG,OAAOjB,kBAFrCM,EAHwB,EAGxBA,QAASC,EAHe,EAGfA,MAAOC,EAHQ,EAGRA,KAMxB,GAAIF,EAAS,OACT,qBAAKb,UAAU,mBAAf,SACI,qBAAKA,UAAU,iBAAiBgB,KAAK,SAArC,SACI,sBAAMhB,UAAU,gBAI5B,GAAIc,EAAO,OAAO,yCAhBc,MA6B5BC,EAAKhB,OAVLQ,EAnB4B,EAmB5BA,cACAkB,EApB4B,EAoB5BA,YAEAC,GAtB4B,EAqB5BtB,kBArB4B,EAsB5BsB,gBACAxB,EAvB4B,EAuB5BA,aAvB4B,IAwB5ByB,OACIC,EAzBwB,EAyBxBA,UACAC,EA1BwB,EA0BxBA,YACAC,EA3BwB,EA2BxBA,YAIR,OACI,gCACI,qBAAI9B,UAAU,iBAAd,UACG,sBAAMA,UAAU,YAAhB,wBACEE,KAEL,oBAAIF,UAAU,YAAd,4BACA,qBAAIA,UAAU,kBAAd,UACI,qBAAIA,UAAU,kBAAd,4BAAgDO,KAChD,qBAAIP,UAAU,kBAAd,0BAA8CyB,KAC9C,qBAAIzB,UAAU,kBAAd,gCAAmD,sBAAMA,UAAWC,YAAKyB,EAAiB,eAAiB,eAAxD,SAAyEA,EAAiB,MAAQ,aAEzJ,oBAAI1B,UAAU,YAAd,4BACA,qBAAIA,UAAU,kBAAd,UACI,qBAAIA,UAAU,kBAAd,wBAA4C4B,KAC5C,qBAAI5B,UAAU,kBAAd,0BAA8C6B,KAC9C,qBAAI7B,UAAU,kBAAd,0BAA8C8B,QAElD,uBACA,cAAC,IAAD,CAAMxB,GAAG,IAAIN,UAAU,oBAAvB,sBC3EG,G,MAAA,IAA0B,kCCkB1B+B,MAZf,WACE,OACE,sBAAK/B,UAAU,YAAf,UACE,qBAAKgC,IAAKC,EAAMC,IAAI,cAAcC,MAAO,CAACC,MAAO,IAAKC,QAAS,QAASC,OAAQ,UAChF,gCACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9B,IACjC,cAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,yBAAyBC,UAAWrB,WCE/CsB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGRQ,EAAS,IAAIC,IAAa,CAC9BC,IAAK,WACLC,MAAO,IAAIC,MAGbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAgBR,OAAQA,EAAxB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,UAINS,SAASC,eAAe,SAM1BnB,M","file":"static/js/main.a0d16f6e.chunk.js","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport clsx from 'clsx';\nimport { Link } from 'react-router-dom';\n\nexport interface ILaunch {\n    flight_number: number\n    launch_date_local: string\n    launch_success: boolean\n    mission_name: string\n}\n\nexport interface ILaunchItem {\n    launch: ILaunch\n}\n\nconst LaunchItem: React.FC<ILaunchItem> = (props) => {\n    const { launch } = props;\n    return (\n        <div className='card card-body mb-3'>\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>Mission: <span className={clsx(launch?.['launch_success'] ? 'text-success' : 'text-danger')}>{launch.mission_name}</span></h4>\n                    <p>Date: {moment(launch.launch_date_local).format('YYYY-MM-DD HH:mm')}</p>\n                </div>\n                <div className=\"col-md-3 text-end m-auto\">\n                    <Link to={`/launch/${launch.flight_number}`} className='btn btn-secondary' >Launch Details</Link>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default LaunchItem\n","import React from 'react'\n\nconst MissionKey = () => {\n    return (\n        <div className='my-3'>\n            <p>\n                <span className=\"px-3 mr-2 bg-success\"/> = Success\n            </p>\n            <p>\n                <span className=\"px-3 mr-2 bg-danger\"/> = Fail\n            </p>\n        </div>\n    )\n}\n\nexport default MissionKey\n","import {\n    useQuery,\n    gql\n  } from \"@apollo/client\";\nimport LaunchItem from './LaunchItem';\nimport MissionKey from \"./MissionKey\";\n\n  const LAUNCHES_QUERY = gql`\n    query LaunchesQuery{\n        launches{\n            flight_number\n            launch_date_local\n            launch_success\n            mission_name\n        }\n    }\n  `;\n\nconst Launches = () => {\n    const { loading, error, data } = useQuery(LAUNCHES_QUERY);\n\n    if (loading) return (\n    <div className='text-center mt-3'>\n        <div className=\"spinner-border\" role=\"status\"><span className=\"sr-only\"></span></div>\n    </div>);\n    if (error) return <p>Error !!</p>;\n    \n    return (\n        <div>\n            <h1 className='display-4 my-3'>Launches</h1>\n            <MissionKey/>\n            {\n                data.launches.map((launch: object) => {\n                    //@ts-ignore\n                    return <LaunchItem key={launch.flight_number} launch={launch}/>\n                })\n            }\n        </div>\n    )\n}\n\nexport default Launches;","import React from 'react';\nimport {\n    useQuery,\n    gql\n  } from \"@apollo/client\";\nimport { Link } from 'react-router-dom';\nimport clsx from 'clsx';\n\nconst LAUNCH_QUERY = gql`\n        query Launch($flight_number: Int!){\n            launch(id: $flight_number){\n                flight_number\n                launch_year\n                launch_date_local\n                launch_success\n                mission_name\n                rocket{\n                    rocket_id\n                    rocket_name\n                    rocket_type\n                }\n            }\n        }\n    `\n\nconst Launch: React.FC = (props) => {\n    //@ts-ignore\n    const {match} = props;\n    const { loading, error, data } = useQuery(LAUNCH_QUERY, {\n        variables: {\n            flight_number: parseInt(match.params.flight_number)\n        }\n    });\n\n    if (loading) return (\n        <div className='text-center mt-3'>\n            <div className=\"spinner-border\" role=\"status\">\n                <span className=\"sr-only\"></span>\n            </div>\n        </div>\n    );\n    if (error) return <p>Error !!</p>;\n    \n    const {\n        flight_number,\n        launch_year,\n        launch_date_local,\n        launch_success,\n        mission_name,\n        rocket:{\n            rocket_id,\n            rocket_name,\n            rocket_type\n        }\n    } = data.launch\n\n    return (\n        <div>\n            <h1 className=\"display-4 my-3\">\n               <span className='text-dark'> Mission: </span>\n                {mission_name}\n            </h1>\n            <h4 className=\"mt-5 mb-3\">Launch Details</h4>\n            <ul className=\"list-group my-3\">\n                <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n                <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n                <li className=\"list-group-item\">Launch Successful: <span className={clsx(launch_success ? 'text-success' : 'text-danger')}>{launch_success ? 'Yes' : 'No'}</span></li>\n            </ul>\n            <h4 className=\"mt-5 mb-3\">Rocket Details</h4>\n            <ul className=\"list-group my-3\">\n                <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n                <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n            </ul>\n            <hr />\n            <Link to='/' className='btn btn-secondary'>Back</Link>\n        </div>\n    )\n}\n\nexport default Launch\n","export default __webpack_public_path__ + \"static/media/logo.91169fa6.png\";","import {Route} from 'react-router-dom'\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport './App.css';\nimport logo from './logo.png';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <img src={logo} alt=\"SpaceX Logo\" style={{width: 300, display: 'block', margin: 'auto'}}/>\n      <div>\n        <Route exact path='/' component={Launches}/>\n        <Route exact path='/launch/:flight_number' component={Launch}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider\n} from \"@apollo/client\";\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Router>\n        <App />\n      </Router>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}